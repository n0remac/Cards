// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/card/deck.proto

package cardconnect

import (
	_ "cards/gen/proto/card"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// DeckServiceName is the fully-qualified name of the DeckService service.
	DeckServiceName = "card.DeckService"
)

// DeckServiceClient is a client for the card.DeckService service.
type DeckServiceClient interface {
}

// NewDeckServiceClient constructs a client for the card.DeckService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDeckServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) DeckServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &deckServiceClient{}
}

// deckServiceClient implements DeckServiceClient.
type deckServiceClient struct {
}

// DeckServiceHandler is an implementation of the card.DeckService service.
type DeckServiceHandler interface {
}

// NewDeckServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDeckServiceHandler(svc DeckServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	return "/card.DeckService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDeckServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDeckServiceHandler struct{}
