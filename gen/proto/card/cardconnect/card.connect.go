// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/card/card.proto

package cardconnect

import (
	card "cards/gen/proto/card"
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// CardServiceName is the fully-qualified name of the CardService service.
	CardServiceName = "card.CardService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CardServiceGetCardsProcedure is the fully-qualified name of the CardService's GetCards RPC.
	CardServiceGetCardsProcedure = "/card.CardService/GetCards"
	// CardServiceNewCardProcedure is the fully-qualified name of the CardService's NewCard RPC.
	CardServiceNewCardProcedure = "/card.CardService/NewCard"
	// CardServiceDeleteCardProcedure is the fully-qualified name of the CardService's DeleteCard RPC.
	CardServiceDeleteCardProcedure = "/card.CardService/DeleteCard"
	// CardServiceGenerateCardsProcedure is the fully-qualified name of the CardService's GenerateCards
	// RPC.
	CardServiceGenerateCardsProcedure = "/card.CardService/GenerateCards"
	// CardServiceCreateCardTemplateProcedure is the fully-qualified name of the CardService's
	// CreateCardTemplate RPC.
	CardServiceCreateCardTemplateProcedure = "/card.CardService/CreateCardTemplate"
	// CardServiceCreateCardProcedure is the fully-qualified name of the CardService's CreateCard RPC.
	CardServiceCreateCardProcedure = "/card.CardService/CreateCard"
	// CardServiceGetCardProcedure is the fully-qualified name of the CardService's GetCard RPC.
	CardServiceGetCardProcedure = "/card.CardService/GetCard"
	// CardServiceGetDecksProcedure is the fully-qualified name of the CardService's GetDecks RPC.
	CardServiceGetDecksProcedure = "/card.CardService/GetDecks"
	// CardServiceGetDeckProcedure is the fully-qualified name of the CardService's GetDeck RPC.
	CardServiceGetDeckProcedure = "/card.CardService/GetDeck"
)

// CardServiceClient is a client for the card.CardService service.
type CardServiceClient interface {
	GetCards(context.Context, *connect_go.Request[card.GetCardsRequest]) (*connect_go.Response[card.GetCardsResponse], error)
	NewCard(context.Context, *connect_go.Request[card.NewCardRequest]) (*connect_go.Response[card.NewCardResponse], error)
	DeleteCard(context.Context, *connect_go.Request[card.DeleteCardRequest]) (*connect_go.Response[card.DeleteCardResponse], error)
	GenerateCards(context.Context, *connect_go.Request[card.GenerateCardsRequest]) (*connect_go.Response[card.GenerateCardsResponse], error)
	CreateCardTemplate(context.Context, *connect_go.Request[card.CreateCardTemplateRequest]) (*connect_go.Response[card.CreateCardTemplateResponse], error)
	CreateCard(context.Context, *connect_go.Request[card.CreateCardRequest]) (*connect_go.Response[card.CreateCardResponse], error)
	GetCard(context.Context, *connect_go.Request[card.GetCardRequest]) (*connect_go.Response[card.GetCardResponse], error)
	GetDecks(context.Context, *connect_go.Request[card.GetCardsRequest]) (*connect_go.Response[card.GetDecksResponse], error)
	GetDeck(context.Context, *connect_go.Request[card.GetDeckRequest]) (*connect_go.Response[card.Deck], error)
}

// NewCardServiceClient constructs a client for the card.CardService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCardServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) CardServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &cardServiceClient{
		getCards: connect_go.NewClient[card.GetCardsRequest, card.GetCardsResponse](
			httpClient,
			baseURL+CardServiceGetCardsProcedure,
			opts...,
		),
		newCard: connect_go.NewClient[card.NewCardRequest, card.NewCardResponse](
			httpClient,
			baseURL+CardServiceNewCardProcedure,
			opts...,
		),
		deleteCard: connect_go.NewClient[card.DeleteCardRequest, card.DeleteCardResponse](
			httpClient,
			baseURL+CardServiceDeleteCardProcedure,
			opts...,
		),
		generateCards: connect_go.NewClient[card.GenerateCardsRequest, card.GenerateCardsResponse](
			httpClient,
			baseURL+CardServiceGenerateCardsProcedure,
			opts...,
		),
		createCardTemplate: connect_go.NewClient[card.CreateCardTemplateRequest, card.CreateCardTemplateResponse](
			httpClient,
			baseURL+CardServiceCreateCardTemplateProcedure,
			opts...,
		),
		createCard: connect_go.NewClient[card.CreateCardRequest, card.CreateCardResponse](
			httpClient,
			baseURL+CardServiceCreateCardProcedure,
			opts...,
		),
		getCard: connect_go.NewClient[card.GetCardRequest, card.GetCardResponse](
			httpClient,
			baseURL+CardServiceGetCardProcedure,
			opts...,
		),
		getDecks: connect_go.NewClient[card.GetCardsRequest, card.GetDecksResponse](
			httpClient,
			baseURL+CardServiceGetDecksProcedure,
			opts...,
		),
		getDeck: connect_go.NewClient[card.GetDeckRequest, card.Deck](
			httpClient,
			baseURL+CardServiceGetDeckProcedure,
			opts...,
		),
	}
}

// cardServiceClient implements CardServiceClient.
type cardServiceClient struct {
	getCards           *connect_go.Client[card.GetCardsRequest, card.GetCardsResponse]
	newCard            *connect_go.Client[card.NewCardRequest, card.NewCardResponse]
	deleteCard         *connect_go.Client[card.DeleteCardRequest, card.DeleteCardResponse]
	generateCards      *connect_go.Client[card.GenerateCardsRequest, card.GenerateCardsResponse]
	createCardTemplate *connect_go.Client[card.CreateCardTemplateRequest, card.CreateCardTemplateResponse]
	createCard         *connect_go.Client[card.CreateCardRequest, card.CreateCardResponse]
	getCard            *connect_go.Client[card.GetCardRequest, card.GetCardResponse]
	getDecks           *connect_go.Client[card.GetCardsRequest, card.GetDecksResponse]
	getDeck            *connect_go.Client[card.GetDeckRequest, card.Deck]
}

// GetCards calls card.CardService.GetCards.
func (c *cardServiceClient) GetCards(ctx context.Context, req *connect_go.Request[card.GetCardsRequest]) (*connect_go.Response[card.GetCardsResponse], error) {
	return c.getCards.CallUnary(ctx, req)
}

// NewCard calls card.CardService.NewCard.
func (c *cardServiceClient) NewCard(ctx context.Context, req *connect_go.Request[card.NewCardRequest]) (*connect_go.Response[card.NewCardResponse], error) {
	return c.newCard.CallUnary(ctx, req)
}

// DeleteCard calls card.CardService.DeleteCard.
func (c *cardServiceClient) DeleteCard(ctx context.Context, req *connect_go.Request[card.DeleteCardRequest]) (*connect_go.Response[card.DeleteCardResponse], error) {
	return c.deleteCard.CallUnary(ctx, req)
}

// GenerateCards calls card.CardService.GenerateCards.
func (c *cardServiceClient) GenerateCards(ctx context.Context, req *connect_go.Request[card.GenerateCardsRequest]) (*connect_go.Response[card.GenerateCardsResponse], error) {
	return c.generateCards.CallUnary(ctx, req)
}

// CreateCardTemplate calls card.CardService.CreateCardTemplate.
func (c *cardServiceClient) CreateCardTemplate(ctx context.Context, req *connect_go.Request[card.CreateCardTemplateRequest]) (*connect_go.Response[card.CreateCardTemplateResponse], error) {
	return c.createCardTemplate.CallUnary(ctx, req)
}

// CreateCard calls card.CardService.CreateCard.
func (c *cardServiceClient) CreateCard(ctx context.Context, req *connect_go.Request[card.CreateCardRequest]) (*connect_go.Response[card.CreateCardResponse], error) {
	return c.createCard.CallUnary(ctx, req)
}

// GetCard calls card.CardService.GetCard.
func (c *cardServiceClient) GetCard(ctx context.Context, req *connect_go.Request[card.GetCardRequest]) (*connect_go.Response[card.GetCardResponse], error) {
	return c.getCard.CallUnary(ctx, req)
}

// GetDecks calls card.CardService.GetDecks.
func (c *cardServiceClient) GetDecks(ctx context.Context, req *connect_go.Request[card.GetCardsRequest]) (*connect_go.Response[card.GetDecksResponse], error) {
	return c.getDecks.CallUnary(ctx, req)
}

// GetDeck calls card.CardService.GetDeck.
func (c *cardServiceClient) GetDeck(ctx context.Context, req *connect_go.Request[card.GetDeckRequest]) (*connect_go.Response[card.Deck], error) {
	return c.getDeck.CallUnary(ctx, req)
}

// CardServiceHandler is an implementation of the card.CardService service.
type CardServiceHandler interface {
	GetCards(context.Context, *connect_go.Request[card.GetCardsRequest]) (*connect_go.Response[card.GetCardsResponse], error)
	NewCard(context.Context, *connect_go.Request[card.NewCardRequest]) (*connect_go.Response[card.NewCardResponse], error)
	DeleteCard(context.Context, *connect_go.Request[card.DeleteCardRequest]) (*connect_go.Response[card.DeleteCardResponse], error)
	GenerateCards(context.Context, *connect_go.Request[card.GenerateCardsRequest]) (*connect_go.Response[card.GenerateCardsResponse], error)
	CreateCardTemplate(context.Context, *connect_go.Request[card.CreateCardTemplateRequest]) (*connect_go.Response[card.CreateCardTemplateResponse], error)
	CreateCard(context.Context, *connect_go.Request[card.CreateCardRequest]) (*connect_go.Response[card.CreateCardResponse], error)
	GetCard(context.Context, *connect_go.Request[card.GetCardRequest]) (*connect_go.Response[card.GetCardResponse], error)
	GetDecks(context.Context, *connect_go.Request[card.GetCardsRequest]) (*connect_go.Response[card.GetDecksResponse], error)
	GetDeck(context.Context, *connect_go.Request[card.GetDeckRequest]) (*connect_go.Response[card.Deck], error)
}

// NewCardServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCardServiceHandler(svc CardServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	cardServiceGetCardsHandler := connect_go.NewUnaryHandler(
		CardServiceGetCardsProcedure,
		svc.GetCards,
		opts...,
	)
	cardServiceNewCardHandler := connect_go.NewUnaryHandler(
		CardServiceNewCardProcedure,
		svc.NewCard,
		opts...,
	)
	cardServiceDeleteCardHandler := connect_go.NewUnaryHandler(
		CardServiceDeleteCardProcedure,
		svc.DeleteCard,
		opts...,
	)
	cardServiceGenerateCardsHandler := connect_go.NewUnaryHandler(
		CardServiceGenerateCardsProcedure,
		svc.GenerateCards,
		opts...,
	)
	cardServiceCreateCardTemplateHandler := connect_go.NewUnaryHandler(
		CardServiceCreateCardTemplateProcedure,
		svc.CreateCardTemplate,
		opts...,
	)
	cardServiceCreateCardHandler := connect_go.NewUnaryHandler(
		CardServiceCreateCardProcedure,
		svc.CreateCard,
		opts...,
	)
	cardServiceGetCardHandler := connect_go.NewUnaryHandler(
		CardServiceGetCardProcedure,
		svc.GetCard,
		opts...,
	)
	cardServiceGetDecksHandler := connect_go.NewUnaryHandler(
		CardServiceGetDecksProcedure,
		svc.GetDecks,
		opts...,
	)
	cardServiceGetDeckHandler := connect_go.NewUnaryHandler(
		CardServiceGetDeckProcedure,
		svc.GetDeck,
		opts...,
	)
	return "/card.CardService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CardServiceGetCardsProcedure:
			cardServiceGetCardsHandler.ServeHTTP(w, r)
		case CardServiceNewCardProcedure:
			cardServiceNewCardHandler.ServeHTTP(w, r)
		case CardServiceDeleteCardProcedure:
			cardServiceDeleteCardHandler.ServeHTTP(w, r)
		case CardServiceGenerateCardsProcedure:
			cardServiceGenerateCardsHandler.ServeHTTP(w, r)
		case CardServiceCreateCardTemplateProcedure:
			cardServiceCreateCardTemplateHandler.ServeHTTP(w, r)
		case CardServiceCreateCardProcedure:
			cardServiceCreateCardHandler.ServeHTTP(w, r)
		case CardServiceGetCardProcedure:
			cardServiceGetCardHandler.ServeHTTP(w, r)
		case CardServiceGetDecksProcedure:
			cardServiceGetDecksHandler.ServeHTTP(w, r)
		case CardServiceGetDeckProcedure:
			cardServiceGetDeckHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCardServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCardServiceHandler struct{}

func (UnimplementedCardServiceHandler) GetCards(context.Context, *connect_go.Request[card.GetCardsRequest]) (*connect_go.Response[card.GetCardsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("card.CardService.GetCards is not implemented"))
}

func (UnimplementedCardServiceHandler) NewCard(context.Context, *connect_go.Request[card.NewCardRequest]) (*connect_go.Response[card.NewCardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("card.CardService.NewCard is not implemented"))
}

func (UnimplementedCardServiceHandler) DeleteCard(context.Context, *connect_go.Request[card.DeleteCardRequest]) (*connect_go.Response[card.DeleteCardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("card.CardService.DeleteCard is not implemented"))
}

func (UnimplementedCardServiceHandler) GenerateCards(context.Context, *connect_go.Request[card.GenerateCardsRequest]) (*connect_go.Response[card.GenerateCardsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("card.CardService.GenerateCards is not implemented"))
}

func (UnimplementedCardServiceHandler) CreateCardTemplate(context.Context, *connect_go.Request[card.CreateCardTemplateRequest]) (*connect_go.Response[card.CreateCardTemplateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("card.CardService.CreateCardTemplate is not implemented"))
}

func (UnimplementedCardServiceHandler) CreateCard(context.Context, *connect_go.Request[card.CreateCardRequest]) (*connect_go.Response[card.CreateCardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("card.CardService.CreateCard is not implemented"))
}

func (UnimplementedCardServiceHandler) GetCard(context.Context, *connect_go.Request[card.GetCardRequest]) (*connect_go.Response[card.GetCardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("card.CardService.GetCard is not implemented"))
}

func (UnimplementedCardServiceHandler) GetDecks(context.Context, *connect_go.Request[card.GetCardsRequest]) (*connect_go.Response[card.GetDecksResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("card.CardService.GetDecks is not implemented"))
}

func (UnimplementedCardServiceHandler) GetDeck(context.Context, *connect_go.Request[card.GetDeckRequest]) (*connect_go.Response[card.Deck], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("card.CardService.GetDeck is not implemented"))
}
