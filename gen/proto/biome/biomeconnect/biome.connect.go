// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/biome/biome.proto

package biomeconnect

import (
	biome "cards/gen/proto/biome"
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// BiomeServiceName is the fully-qualified name of the BiomeService service.
	BiomeServiceName = "biome.BiomeService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BiomeServiceCreateBiomeProcedure is the fully-qualified name of the BiomeService's CreateBiome
	// RPC.
	BiomeServiceCreateBiomeProcedure = "/biome.BiomeService/CreateBiome"
	// BiomeServiceGetBiomeProcedure is the fully-qualified name of the BiomeService's GetBiome RPC.
	BiomeServiceGetBiomeProcedure = "/biome.BiomeService/GetBiome"
	// BiomeServiceGetBiomesProcedure is the fully-qualified name of the BiomeService's GetBiomes RPC.
	BiomeServiceGetBiomesProcedure = "/biome.BiomeService/GetBiomes"
)

// BiomeServiceClient is a client for the biome.BiomeService service.
type BiomeServiceClient interface {
	CreateBiome(context.Context, *connect_go.Request[biome.CreateBiomeRequest]) (*connect_go.Response[biome.CreateBiomeResponse], error)
	GetBiome(context.Context, *connect_go.Request[biome.GetBiomeRequest]) (*connect_go.Response[biome.GetBiomeResponse], error)
	GetBiomes(context.Context, *connect_go.Request[biome.GetBiomesRequest]) (*connect_go.Response[biome.GetBiomesResponse], error)
}

// NewBiomeServiceClient constructs a client for the biome.BiomeService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBiomeServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) BiomeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &biomeServiceClient{
		createBiome: connect_go.NewClient[biome.CreateBiomeRequest, biome.CreateBiomeResponse](
			httpClient,
			baseURL+BiomeServiceCreateBiomeProcedure,
			opts...,
		),
		getBiome: connect_go.NewClient[biome.GetBiomeRequest, biome.GetBiomeResponse](
			httpClient,
			baseURL+BiomeServiceGetBiomeProcedure,
			opts...,
		),
		getBiomes: connect_go.NewClient[biome.GetBiomesRequest, biome.GetBiomesResponse](
			httpClient,
			baseURL+BiomeServiceGetBiomesProcedure,
			opts...,
		),
	}
}

// biomeServiceClient implements BiomeServiceClient.
type biomeServiceClient struct {
	createBiome *connect_go.Client[biome.CreateBiomeRequest, biome.CreateBiomeResponse]
	getBiome    *connect_go.Client[biome.GetBiomeRequest, biome.GetBiomeResponse]
	getBiomes   *connect_go.Client[biome.GetBiomesRequest, biome.GetBiomesResponse]
}

// CreateBiome calls biome.BiomeService.CreateBiome.
func (c *biomeServiceClient) CreateBiome(ctx context.Context, req *connect_go.Request[biome.CreateBiomeRequest]) (*connect_go.Response[biome.CreateBiomeResponse], error) {
	return c.createBiome.CallUnary(ctx, req)
}

// GetBiome calls biome.BiomeService.GetBiome.
func (c *biomeServiceClient) GetBiome(ctx context.Context, req *connect_go.Request[biome.GetBiomeRequest]) (*connect_go.Response[biome.GetBiomeResponse], error) {
	return c.getBiome.CallUnary(ctx, req)
}

// GetBiomes calls biome.BiomeService.GetBiomes.
func (c *biomeServiceClient) GetBiomes(ctx context.Context, req *connect_go.Request[biome.GetBiomesRequest]) (*connect_go.Response[biome.GetBiomesResponse], error) {
	return c.getBiomes.CallUnary(ctx, req)
}

// BiomeServiceHandler is an implementation of the biome.BiomeService service.
type BiomeServiceHandler interface {
	CreateBiome(context.Context, *connect_go.Request[biome.CreateBiomeRequest]) (*connect_go.Response[biome.CreateBiomeResponse], error)
	GetBiome(context.Context, *connect_go.Request[biome.GetBiomeRequest]) (*connect_go.Response[biome.GetBiomeResponse], error)
	GetBiomes(context.Context, *connect_go.Request[biome.GetBiomesRequest]) (*connect_go.Response[biome.GetBiomesResponse], error)
}

// NewBiomeServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBiomeServiceHandler(svc BiomeServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	biomeServiceCreateBiomeHandler := connect_go.NewUnaryHandler(
		BiomeServiceCreateBiomeProcedure,
		svc.CreateBiome,
		opts...,
	)
	biomeServiceGetBiomeHandler := connect_go.NewUnaryHandler(
		BiomeServiceGetBiomeProcedure,
		svc.GetBiome,
		opts...,
	)
	biomeServiceGetBiomesHandler := connect_go.NewUnaryHandler(
		BiomeServiceGetBiomesProcedure,
		svc.GetBiomes,
		opts...,
	)
	return "/biome.BiomeService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BiomeServiceCreateBiomeProcedure:
			biomeServiceCreateBiomeHandler.ServeHTTP(w, r)
		case BiomeServiceGetBiomeProcedure:
			biomeServiceGetBiomeHandler.ServeHTTP(w, r)
		case BiomeServiceGetBiomesProcedure:
			biomeServiceGetBiomesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBiomeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBiomeServiceHandler struct{}

func (UnimplementedBiomeServiceHandler) CreateBiome(context.Context, *connect_go.Request[biome.CreateBiomeRequest]) (*connect_go.Response[biome.CreateBiomeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("biome.BiomeService.CreateBiome is not implemented"))
}

func (UnimplementedBiomeServiceHandler) GetBiome(context.Context, *connect_go.Request[biome.GetBiomeRequest]) (*connect_go.Response[biome.GetBiomeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("biome.BiomeService.GetBiome is not implemented"))
}

func (UnimplementedBiomeServiceHandler) GetBiomes(context.Context, *connect_go.Request[biome.GetBiomesRequest]) (*connect_go.Response[biome.GetBiomesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("biome.BiomeService.GetBiomes is not implemented"))
}
