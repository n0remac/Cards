// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/story/story.proto

package story

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StoryServiceClient is the client API for StoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoryServiceClient interface {
	GetScenes(ctx context.Context, in *GetScenesRequest, opts ...grpc.CallOption) (*GetScenesResponse, error)
	// Create a new scene
	CreateScene(ctx context.Context, in *CreateSceneRequest, opts ...grpc.CallOption) (*CreateSceneResponse, error)
	// Read (get) a scene by ID
	GetScene(ctx context.Context, in *GetSceneRequest, opts ...grpc.CallOption) (*GetSceneResponse, error)
	// Update an existing scene
	UpdateScene(ctx context.Context, in *UpdateSceneRequest, opts ...grpc.CallOption) (*UpdateSceneResponse, error)
	// Delete a scene by ID
	DeleteScene(ctx context.Context, in *DeleteSceneRequest, opts ...grpc.CallOption) (*DeleteSceneResponse, error)
}

type storyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStoryServiceClient(cc grpc.ClientConnInterface) StoryServiceClient {
	return &storyServiceClient{cc}
}

func (c *storyServiceClient) GetScenes(ctx context.Context, in *GetScenesRequest, opts ...grpc.CallOption) (*GetScenesResponse, error) {
	out := new(GetScenesResponse)
	err := c.cc.Invoke(ctx, "/story.StoryService/GetScenes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storyServiceClient) CreateScene(ctx context.Context, in *CreateSceneRequest, opts ...grpc.CallOption) (*CreateSceneResponse, error) {
	out := new(CreateSceneResponse)
	err := c.cc.Invoke(ctx, "/story.StoryService/CreateScene", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storyServiceClient) GetScene(ctx context.Context, in *GetSceneRequest, opts ...grpc.CallOption) (*GetSceneResponse, error) {
	out := new(GetSceneResponse)
	err := c.cc.Invoke(ctx, "/story.StoryService/GetScene", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storyServiceClient) UpdateScene(ctx context.Context, in *UpdateSceneRequest, opts ...grpc.CallOption) (*UpdateSceneResponse, error) {
	out := new(UpdateSceneResponse)
	err := c.cc.Invoke(ctx, "/story.StoryService/UpdateScene", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storyServiceClient) DeleteScene(ctx context.Context, in *DeleteSceneRequest, opts ...grpc.CallOption) (*DeleteSceneResponse, error) {
	out := new(DeleteSceneResponse)
	err := c.cc.Invoke(ctx, "/story.StoryService/DeleteScene", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoryServiceServer is the server API for StoryService service.
// All implementations should embed UnimplementedStoryServiceServer
// for forward compatibility
type StoryServiceServer interface {
	GetScenes(context.Context, *GetScenesRequest) (*GetScenesResponse, error)
	// Create a new scene
	CreateScene(context.Context, *CreateSceneRequest) (*CreateSceneResponse, error)
	// Read (get) a scene by ID
	GetScene(context.Context, *GetSceneRequest) (*GetSceneResponse, error)
	// Update an existing scene
	UpdateScene(context.Context, *UpdateSceneRequest) (*UpdateSceneResponse, error)
	// Delete a scene by ID
	DeleteScene(context.Context, *DeleteSceneRequest) (*DeleteSceneResponse, error)
}

// UnimplementedStoryServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStoryServiceServer struct {
}

func (UnimplementedStoryServiceServer) GetScenes(context.Context, *GetScenesRequest) (*GetScenesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScenes not implemented")
}
func (UnimplementedStoryServiceServer) CreateScene(context.Context, *CreateSceneRequest) (*CreateSceneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScene not implemented")
}
func (UnimplementedStoryServiceServer) GetScene(context.Context, *GetSceneRequest) (*GetSceneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScene not implemented")
}
func (UnimplementedStoryServiceServer) UpdateScene(context.Context, *UpdateSceneRequest) (*UpdateSceneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScene not implemented")
}
func (UnimplementedStoryServiceServer) DeleteScene(context.Context, *DeleteSceneRequest) (*DeleteSceneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScene not implemented")
}

// UnsafeStoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoryServiceServer will
// result in compilation errors.
type UnsafeStoryServiceServer interface {
	mustEmbedUnimplementedStoryServiceServer()
}

func RegisterStoryServiceServer(s grpc.ServiceRegistrar, srv StoryServiceServer) {
	s.RegisterService(&StoryService_ServiceDesc, srv)
}

func _StoryService_GetScenes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScenesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoryServiceServer).GetScenes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/story.StoryService/GetScenes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoryServiceServer).GetScenes(ctx, req.(*GetScenesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoryService_CreateScene_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSceneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoryServiceServer).CreateScene(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/story.StoryService/CreateScene",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoryServiceServer).CreateScene(ctx, req.(*CreateSceneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoryService_GetScene_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSceneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoryServiceServer).GetScene(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/story.StoryService/GetScene",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoryServiceServer).GetScene(ctx, req.(*GetSceneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoryService_UpdateScene_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSceneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoryServiceServer).UpdateScene(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/story.StoryService/UpdateScene",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoryServiceServer).UpdateScene(ctx, req.(*UpdateSceneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoryService_DeleteScene_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSceneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoryServiceServer).DeleteScene(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/story.StoryService/DeleteScene",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoryServiceServer).DeleteScene(ctx, req.(*DeleteSceneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StoryService_ServiceDesc is the grpc.ServiceDesc for StoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "story.StoryService",
	HandlerType: (*StoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetScenes",
			Handler:    _StoryService_GetScenes_Handler,
		},
		{
			MethodName: "CreateScene",
			Handler:    _StoryService_CreateScene_Handler,
		},
		{
			MethodName: "GetScene",
			Handler:    _StoryService_GetScene_Handler,
		},
		{
			MethodName: "UpdateScene",
			Handler:    _StoryService_UpdateScene_Handler,
		},
		{
			MethodName: "DeleteScene",
			Handler:    _StoryService_DeleteScene_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/story/story.proto",
}
