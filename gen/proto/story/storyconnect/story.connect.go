// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/story/story.proto

package storyconnect

import (
	story "cards/gen/proto/story"
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// StoryServiceName is the fully-qualified name of the StoryService service.
	StoryServiceName = "story.StoryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StoryServiceGetScenesProcedure is the fully-qualified name of the StoryService's GetScenes RPC.
	StoryServiceGetScenesProcedure = "/story.StoryService/GetScenes"
	// StoryServiceCreateSceneProcedure is the fully-qualified name of the StoryService's CreateScene
	// RPC.
	StoryServiceCreateSceneProcedure = "/story.StoryService/CreateScene"
	// StoryServiceGetSceneProcedure is the fully-qualified name of the StoryService's GetScene RPC.
	StoryServiceGetSceneProcedure = "/story.StoryService/GetScene"
	// StoryServiceUpdateSceneProcedure is the fully-qualified name of the StoryService's UpdateScene
	// RPC.
	StoryServiceUpdateSceneProcedure = "/story.StoryService/UpdateScene"
	// StoryServiceDeleteSceneProcedure is the fully-qualified name of the StoryService's DeleteScene
	// RPC.
	StoryServiceDeleteSceneProcedure = "/story.StoryService/DeleteScene"
)

// StoryServiceClient is a client for the story.StoryService service.
type StoryServiceClient interface {
	GetScenes(context.Context, *connect_go.Request[story.GetScenesRequest]) (*connect_go.Response[story.GetScenesResponse], error)
	// Create a new scene
	CreateScene(context.Context, *connect_go.Request[story.CreateSceneRequest]) (*connect_go.Response[story.CreateSceneResponse], error)
	// Read (get) a scene by ID
	GetScene(context.Context, *connect_go.Request[story.GetSceneRequest]) (*connect_go.Response[story.GetSceneResponse], error)
	// Update an existing scene
	UpdateScene(context.Context, *connect_go.Request[story.UpdateSceneRequest]) (*connect_go.Response[story.UpdateSceneResponse], error)
	// Delete a scene by ID
	DeleteScene(context.Context, *connect_go.Request[story.DeleteSceneRequest]) (*connect_go.Response[story.DeleteSceneResponse], error)
}

// NewStoryServiceClient constructs a client for the story.StoryService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStoryServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) StoryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &storyServiceClient{
		getScenes: connect_go.NewClient[story.GetScenesRequest, story.GetScenesResponse](
			httpClient,
			baseURL+StoryServiceGetScenesProcedure,
			opts...,
		),
		createScene: connect_go.NewClient[story.CreateSceneRequest, story.CreateSceneResponse](
			httpClient,
			baseURL+StoryServiceCreateSceneProcedure,
			opts...,
		),
		getScene: connect_go.NewClient[story.GetSceneRequest, story.GetSceneResponse](
			httpClient,
			baseURL+StoryServiceGetSceneProcedure,
			opts...,
		),
		updateScene: connect_go.NewClient[story.UpdateSceneRequest, story.UpdateSceneResponse](
			httpClient,
			baseURL+StoryServiceUpdateSceneProcedure,
			opts...,
		),
		deleteScene: connect_go.NewClient[story.DeleteSceneRequest, story.DeleteSceneResponse](
			httpClient,
			baseURL+StoryServiceDeleteSceneProcedure,
			opts...,
		),
	}
}

// storyServiceClient implements StoryServiceClient.
type storyServiceClient struct {
	getScenes   *connect_go.Client[story.GetScenesRequest, story.GetScenesResponse]
	createScene *connect_go.Client[story.CreateSceneRequest, story.CreateSceneResponse]
	getScene    *connect_go.Client[story.GetSceneRequest, story.GetSceneResponse]
	updateScene *connect_go.Client[story.UpdateSceneRequest, story.UpdateSceneResponse]
	deleteScene *connect_go.Client[story.DeleteSceneRequest, story.DeleteSceneResponse]
}

// GetScenes calls story.StoryService.GetScenes.
func (c *storyServiceClient) GetScenes(ctx context.Context, req *connect_go.Request[story.GetScenesRequest]) (*connect_go.Response[story.GetScenesResponse], error) {
	return c.getScenes.CallUnary(ctx, req)
}

// CreateScene calls story.StoryService.CreateScene.
func (c *storyServiceClient) CreateScene(ctx context.Context, req *connect_go.Request[story.CreateSceneRequest]) (*connect_go.Response[story.CreateSceneResponse], error) {
	return c.createScene.CallUnary(ctx, req)
}

// GetScene calls story.StoryService.GetScene.
func (c *storyServiceClient) GetScene(ctx context.Context, req *connect_go.Request[story.GetSceneRequest]) (*connect_go.Response[story.GetSceneResponse], error) {
	return c.getScene.CallUnary(ctx, req)
}

// UpdateScene calls story.StoryService.UpdateScene.
func (c *storyServiceClient) UpdateScene(ctx context.Context, req *connect_go.Request[story.UpdateSceneRequest]) (*connect_go.Response[story.UpdateSceneResponse], error) {
	return c.updateScene.CallUnary(ctx, req)
}

// DeleteScene calls story.StoryService.DeleteScene.
func (c *storyServiceClient) DeleteScene(ctx context.Context, req *connect_go.Request[story.DeleteSceneRequest]) (*connect_go.Response[story.DeleteSceneResponse], error) {
	return c.deleteScene.CallUnary(ctx, req)
}

// StoryServiceHandler is an implementation of the story.StoryService service.
type StoryServiceHandler interface {
	GetScenes(context.Context, *connect_go.Request[story.GetScenesRequest]) (*connect_go.Response[story.GetScenesResponse], error)
	// Create a new scene
	CreateScene(context.Context, *connect_go.Request[story.CreateSceneRequest]) (*connect_go.Response[story.CreateSceneResponse], error)
	// Read (get) a scene by ID
	GetScene(context.Context, *connect_go.Request[story.GetSceneRequest]) (*connect_go.Response[story.GetSceneResponse], error)
	// Update an existing scene
	UpdateScene(context.Context, *connect_go.Request[story.UpdateSceneRequest]) (*connect_go.Response[story.UpdateSceneResponse], error)
	// Delete a scene by ID
	DeleteScene(context.Context, *connect_go.Request[story.DeleteSceneRequest]) (*connect_go.Response[story.DeleteSceneResponse], error)
}

// NewStoryServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStoryServiceHandler(svc StoryServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	storyServiceGetScenesHandler := connect_go.NewUnaryHandler(
		StoryServiceGetScenesProcedure,
		svc.GetScenes,
		opts...,
	)
	storyServiceCreateSceneHandler := connect_go.NewUnaryHandler(
		StoryServiceCreateSceneProcedure,
		svc.CreateScene,
		opts...,
	)
	storyServiceGetSceneHandler := connect_go.NewUnaryHandler(
		StoryServiceGetSceneProcedure,
		svc.GetScene,
		opts...,
	)
	storyServiceUpdateSceneHandler := connect_go.NewUnaryHandler(
		StoryServiceUpdateSceneProcedure,
		svc.UpdateScene,
		opts...,
	)
	storyServiceDeleteSceneHandler := connect_go.NewUnaryHandler(
		StoryServiceDeleteSceneProcedure,
		svc.DeleteScene,
		opts...,
	)
	return "/story.StoryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StoryServiceGetScenesProcedure:
			storyServiceGetScenesHandler.ServeHTTP(w, r)
		case StoryServiceCreateSceneProcedure:
			storyServiceCreateSceneHandler.ServeHTTP(w, r)
		case StoryServiceGetSceneProcedure:
			storyServiceGetSceneHandler.ServeHTTP(w, r)
		case StoryServiceUpdateSceneProcedure:
			storyServiceUpdateSceneHandler.ServeHTTP(w, r)
		case StoryServiceDeleteSceneProcedure:
			storyServiceDeleteSceneHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStoryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStoryServiceHandler struct{}

func (UnimplementedStoryServiceHandler) GetScenes(context.Context, *connect_go.Request[story.GetScenesRequest]) (*connect_go.Response[story.GetScenesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("story.StoryService.GetScenes is not implemented"))
}

func (UnimplementedStoryServiceHandler) CreateScene(context.Context, *connect_go.Request[story.CreateSceneRequest]) (*connect_go.Response[story.CreateSceneResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("story.StoryService.CreateScene is not implemented"))
}

func (UnimplementedStoryServiceHandler) GetScene(context.Context, *connect_go.Request[story.GetSceneRequest]) (*connect_go.Response[story.GetSceneResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("story.StoryService.GetScene is not implemented"))
}

func (UnimplementedStoryServiceHandler) UpdateScene(context.Context, *connect_go.Request[story.UpdateSceneRequest]) (*connect_go.Response[story.UpdateSceneResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("story.StoryService.UpdateScene is not implemented"))
}

func (UnimplementedStoryServiceHandler) DeleteScene(context.Context, *connect_go.Request[story.DeleteSceneRequest]) (*connect_go.Response[story.DeleteSceneResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("story.StoryService.DeleteScene is not implemented"))
}
