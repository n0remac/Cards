// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file proto/biome/biome.proto (package biome, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Message definitions
 *
 * @generated from message biome.CardResponse
 */
export class CardResponse extends Message<CardResponse> {
  /**
   * @generated from field: string data = 1;
   */
  data = "";

  constructor(data?: PartialMessage<CardResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "biome.CardResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CardResponse {
    return new CardResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CardResponse {
    return new CardResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CardResponse {
    return new CardResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CardResponse | PlainMessage<CardResponse> | undefined, b: CardResponse | PlainMessage<CardResponse> | undefined): boolean {
    return proto3.util.equals(CardResponse, a, b);
  }
}

/**
 * @generated from message biome.Biome
 */
export class Biome extends Message<Biome> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string type = 2;
   */
  type = "";

  /**
   * @generated from field: biome.Characteristics characteristics = 3;
   */
  characteristics?: Characteristics;

  constructor(data?: PartialMessage<Biome>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "biome.Biome";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "characteristics", kind: "message", T: Characteristics },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Biome {
    return new Biome().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Biome {
    return new Biome().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Biome {
    return new Biome().fromJsonString(jsonString, options);
  }

  static equals(a: Biome | PlainMessage<Biome> | undefined, b: Biome | PlainMessage<Biome> | undefined): boolean {
    return proto3.util.equals(Biome, a, b);
  }
}

/**
 * @generated from message biome.Characteristics
 */
export class Characteristics extends Message<Characteristics> {
  /**
   * @generated from field: string climate = 1;
   */
  climate = "";

  /**
   * @generated from field: string vegetation = 2;
   */
  vegetation = "";

  /**
   * @generated from field: repeated string plants = 3;
   */
  plants: string[] = [];

  /**
   * @generated from field: repeated string wildlife = 4;
   */
  wildlife: string[] = [];

  /**
   * @generated from field: string precipitation = 5;
   */
  precipitation = "";

  /**
   * @generated from field: repeated string elements = 6;
   */
  elements: string[] = [];

  constructor(data?: PartialMessage<Characteristics>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "biome.Characteristics";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "climate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "vegetation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "plants", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "wildlife", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "precipitation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "elements", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Characteristics {
    return new Characteristics().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Characteristics {
    return new Characteristics().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Characteristics {
    return new Characteristics().fromJsonString(jsonString, options);
  }

  static equals(a: Characteristics | PlainMessage<Characteristics> | undefined, b: Characteristics | PlainMessage<Characteristics> | undefined): boolean {
    return proto3.util.equals(Characteristics, a, b);
  }
}

/**
 * @generated from message biome.Biomes
 */
export class Biomes extends Message<Biomes> {
  /**
   * @generated from field: repeated biome.Biome biomes = 1;
   */
  biomes: Biome[] = [];

  constructor(data?: PartialMessage<Biomes>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "biome.Biomes";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "biomes", kind: "message", T: Biome, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Biomes {
    return new Biomes().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Biomes {
    return new Biomes().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Biomes {
    return new Biomes().fromJsonString(jsonString, options);
  }

  static equals(a: Biomes | PlainMessage<Biomes> | undefined, b: Biomes | PlainMessage<Biomes> | undefined): boolean {
    return proto3.util.equals(Biomes, a, b);
  }
}

/**
 * @generated from message biome.CreateBiomeRequest
 */
export class CreateBiomeRequest extends Message<CreateBiomeRequest> {
  /**
   * @generated from field: biome.Biome biome = 1;
   */
  biome?: Biome;

  constructor(data?: PartialMessage<CreateBiomeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "biome.CreateBiomeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "biome", kind: "message", T: Biome },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateBiomeRequest {
    return new CreateBiomeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateBiomeRequest {
    return new CreateBiomeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateBiomeRequest {
    return new CreateBiomeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateBiomeRequest | PlainMessage<CreateBiomeRequest> | undefined, b: CreateBiomeRequest | PlainMessage<CreateBiomeRequest> | undefined): boolean {
    return proto3.util.equals(CreateBiomeRequest, a, b);
  }
}

/**
 * @generated from message biome.CreateBiomeResponse
 */
export class CreateBiomeResponse extends Message<CreateBiomeResponse> {
  /**
   * @generated from field: biome.Biome biome = 1;
   */
  biome?: Biome;

  constructor(data?: PartialMessage<CreateBiomeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "biome.CreateBiomeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "biome", kind: "message", T: Biome },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateBiomeResponse {
    return new CreateBiomeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateBiomeResponse {
    return new CreateBiomeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateBiomeResponse {
    return new CreateBiomeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateBiomeResponse | PlainMessage<CreateBiomeResponse> | undefined, b: CreateBiomeResponse | PlainMessage<CreateBiomeResponse> | undefined): boolean {
    return proto3.util.equals(CreateBiomeResponse, a, b);
  }
}

/**
 * @generated from message biome.GetBiomeRequest
 */
export class GetBiomeRequest extends Message<GetBiomeRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetBiomeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "biome.GetBiomeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBiomeRequest {
    return new GetBiomeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBiomeRequest {
    return new GetBiomeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBiomeRequest {
    return new GetBiomeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetBiomeRequest | PlainMessage<GetBiomeRequest> | undefined, b: GetBiomeRequest | PlainMessage<GetBiomeRequest> | undefined): boolean {
    return proto3.util.equals(GetBiomeRequest, a, b);
  }
}

/**
 * @generated from message biome.GetBiomeResponse
 */
export class GetBiomeResponse extends Message<GetBiomeResponse> {
  /**
   * @generated from field: biome.Biome biome = 1;
   */
  biome?: Biome;

  constructor(data?: PartialMessage<GetBiomeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "biome.GetBiomeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "biome", kind: "message", T: Biome },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBiomeResponse {
    return new GetBiomeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBiomeResponse {
    return new GetBiomeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBiomeResponse {
    return new GetBiomeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetBiomeResponse | PlainMessage<GetBiomeResponse> | undefined, b: GetBiomeResponse | PlainMessage<GetBiomeResponse> | undefined): boolean {
    return proto3.util.equals(GetBiomeResponse, a, b);
  }
}

/**
 * @generated from message biome.GetBiomesRequest
 */
export class GetBiomesRequest extends Message<GetBiomesRequest> {
  constructor(data?: PartialMessage<GetBiomesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "biome.GetBiomesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBiomesRequest {
    return new GetBiomesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBiomesRequest {
    return new GetBiomesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBiomesRequest {
    return new GetBiomesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetBiomesRequest | PlainMessage<GetBiomesRequest> | undefined, b: GetBiomesRequest | PlainMessage<GetBiomesRequest> | undefined): boolean {
    return proto3.util.equals(GetBiomesRequest, a, b);
  }
}

/**
 * @generated from message biome.GetBiomesResponse
 */
export class GetBiomesResponse extends Message<GetBiomesResponse> {
  /**
   * @generated from field: biome.Biomes biomes = 1;
   */
  biomes?: Biomes;

  constructor(data?: PartialMessage<GetBiomesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "biome.GetBiomesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "biomes", kind: "message", T: Biomes },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBiomesResponse {
    return new GetBiomesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBiomesResponse {
    return new GetBiomesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBiomesResponse {
    return new GetBiomesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetBiomesResponse | PlainMessage<GetBiomesResponse> | undefined, b: GetBiomesResponse | PlainMessage<GetBiomesResponse> | undefined): boolean {
    return proto3.util.equals(GetBiomesResponse, a, b);
  }
}

