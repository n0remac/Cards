// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file proto/card/deck.proto (package card, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Card } from "./card_pb.js";

/**
 * Deck related messages and services
 *
 * @generated from message card.Deck
 */
export class Deck extends Message<Deck> {
  /**
   * @generated from field: repeated card.Card cards = 1;
   */
  cards: Card[] = [];

  /**
   * @generated from field: string user_id = 2;
   */
  userId = "";

  constructor(data?: PartialMessage<Deck>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "card.Deck";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cards", kind: "message", T: Card, repeated: true },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Deck {
    return new Deck().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Deck {
    return new Deck().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Deck {
    return new Deck().fromJsonString(jsonString, options);
  }

  static equals(a: Deck | PlainMessage<Deck> | undefined, b: Deck | PlainMessage<Deck> | undefined): boolean {
    return proto3.util.equals(Deck, a, b);
  }
}

/**
 * @generated from message card.GenerateDeckRequest
 */
export class GenerateDeckRequest extends Message<GenerateDeckRequest> {
  /**
   * @generated from field: int32 num_cards = 1;
   */
  numCards = 0;

  /**
   * @generated from field: string biome = 2;
   */
  biome = "";

  /**
   * @generated from field: string user_id = 3;
   */
  userId = "";

  constructor(data?: PartialMessage<GenerateDeckRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "card.GenerateDeckRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "num_cards", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "biome", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateDeckRequest {
    return new GenerateDeckRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateDeckRequest {
    return new GenerateDeckRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateDeckRequest {
    return new GenerateDeckRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateDeckRequest | PlainMessage<GenerateDeckRequest> | undefined, b: GenerateDeckRequest | PlainMessage<GenerateDeckRequest> | undefined): boolean {
    return proto3.util.equals(GenerateDeckRequest, a, b);
  }
}

/**
 * @generated from message card.GenerateDeckResponse
 */
export class GenerateDeckResponse extends Message<GenerateDeckResponse> {
  /**
   * @generated from field: card.Deck deck = 1;
   */
  deck?: Deck;

  constructor(data?: PartialMessage<GenerateDeckResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "card.GenerateDeckResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deck", kind: "message", T: Deck },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateDeckResponse {
    return new GenerateDeckResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateDeckResponse {
    return new GenerateDeckResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateDeckResponse {
    return new GenerateDeckResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateDeckResponse | PlainMessage<GenerateDeckResponse> | undefined, b: GenerateDeckResponse | PlainMessage<GenerateDeckResponse> | undefined): boolean {
    return proto3.util.equals(GenerateDeckResponse, a, b);
  }
}

/**
 * @generated from message card.CreateDeckRequest
 */
export class CreateDeckRequest extends Message<CreateDeckRequest> {
  /**
   * @generated from field: card.Deck deck = 1;
   */
  deck?: Deck;

  constructor(data?: PartialMessage<CreateDeckRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "card.CreateDeckRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deck", kind: "message", T: Deck },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateDeckRequest {
    return new CreateDeckRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateDeckRequest {
    return new CreateDeckRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateDeckRequest {
    return new CreateDeckRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateDeckRequest | PlainMessage<CreateDeckRequest> | undefined, b: CreateDeckRequest | PlainMessage<CreateDeckRequest> | undefined): boolean {
    return proto3.util.equals(CreateDeckRequest, a, b);
  }
}

/**
 * @generated from message card.CreateDeckResponse
 */
export class CreateDeckResponse extends Message<CreateDeckResponse> {
  /**
   * @generated from field: card.Deck deck = 1;
   */
  deck?: Deck;

  constructor(data?: PartialMessage<CreateDeckResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "card.CreateDeckResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deck", kind: "message", T: Deck },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateDeckResponse {
    return new CreateDeckResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateDeckResponse {
    return new CreateDeckResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateDeckResponse {
    return new CreateDeckResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateDeckResponse | PlainMessage<CreateDeckResponse> | undefined, b: CreateDeckResponse | PlainMessage<CreateDeckResponse> | undefined): boolean {
    return proto3.util.equals(CreateDeckResponse, a, b);
  }
}

/**
 * @generated from message card.GetDeckRequest
 */
export class GetDeckRequest extends Message<GetDeckRequest> {
  /**
   * @generated from field: card.Deck deck = 1;
   */
  deck?: Deck;

  constructor(data?: PartialMessage<GetDeckRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "card.GetDeckRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deck", kind: "message", T: Deck },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDeckRequest {
    return new GetDeckRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDeckRequest {
    return new GetDeckRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDeckRequest {
    return new GetDeckRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDeckRequest | PlainMessage<GetDeckRequest> | undefined, b: GetDeckRequest | PlainMessage<GetDeckRequest> | undefined): boolean {
    return proto3.util.equals(GetDeckRequest, a, b);
  }
}

/**
 * @generated from message card.GetDeckResponse
 */
export class GetDeckResponse extends Message<GetDeckResponse> {
  /**
   * @generated from field: card.Deck deck = 1;
   */
  deck?: Deck;

  constructor(data?: PartialMessage<GetDeckResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "card.GetDeckResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deck", kind: "message", T: Deck },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDeckResponse {
    return new GetDeckResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDeckResponse {
    return new GetDeckResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDeckResponse {
    return new GetDeckResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetDeckResponse | PlainMessage<GetDeckResponse> | undefined, b: GetDeckResponse | PlainMessage<GetDeckResponse> | undefined): boolean {
    return proto3.util.equals(GetDeckResponse, a, b);
  }
}

/**
 * @generated from message card.UpdateDeckRequest
 */
export class UpdateDeckRequest extends Message<UpdateDeckRequest> {
  /**
   * @generated from field: card.Deck deck = 1;
   */
  deck?: Deck;

  constructor(data?: PartialMessage<UpdateDeckRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "card.UpdateDeckRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deck", kind: "message", T: Deck },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateDeckRequest {
    return new UpdateDeckRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateDeckRequest {
    return new UpdateDeckRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateDeckRequest {
    return new UpdateDeckRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateDeckRequest | PlainMessage<UpdateDeckRequest> | undefined, b: UpdateDeckRequest | PlainMessage<UpdateDeckRequest> | undefined): boolean {
    return proto3.util.equals(UpdateDeckRequest, a, b);
  }
}

/**
 * @generated from message card.UpdateDeckResponse
 */
export class UpdateDeckResponse extends Message<UpdateDeckResponse> {
  /**
   * @generated from field: card.Deck deck = 1;
   */
  deck?: Deck;

  constructor(data?: PartialMessage<UpdateDeckResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "card.UpdateDeckResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deck", kind: "message", T: Deck },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateDeckResponse {
    return new UpdateDeckResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateDeckResponse {
    return new UpdateDeckResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateDeckResponse {
    return new UpdateDeckResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateDeckResponse | PlainMessage<UpdateDeckResponse> | undefined, b: UpdateDeckResponse | PlainMessage<UpdateDeckResponse> | undefined): boolean {
    return proto3.util.equals(UpdateDeckResponse, a, b);
  }
}

/**
 * @generated from message card.DeleteDeckRequest
 */
export class DeleteDeckRequest extends Message<DeleteDeckRequest> {
  /**
   * @generated from field: card.Deck deck = 1;
   */
  deck?: Deck;

  constructor(data?: PartialMessage<DeleteDeckRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "card.DeleteDeckRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deck", kind: "message", T: Deck },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteDeckRequest {
    return new DeleteDeckRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteDeckRequest {
    return new DeleteDeckRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteDeckRequest {
    return new DeleteDeckRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteDeckRequest | PlainMessage<DeleteDeckRequest> | undefined, b: DeleteDeckRequest | PlainMessage<DeleteDeckRequest> | undefined): boolean {
    return proto3.util.equals(DeleteDeckRequest, a, b);
  }
}

/**
 * @generated from message card.DeleteDeckResponse
 */
export class DeleteDeckResponse extends Message<DeleteDeckResponse> {
  /**
   * @generated from field: card.Deck deck = 1;
   */
  deck?: Deck;

  constructor(data?: PartialMessage<DeleteDeckResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "card.DeleteDeckResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deck", kind: "message", T: Deck },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteDeckResponse {
    return new DeleteDeckResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteDeckResponse {
    return new DeleteDeckResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteDeckResponse {
    return new DeleteDeckResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteDeckResponse | PlainMessage<DeleteDeckResponse> | undefined, b: DeleteDeckResponse | PlainMessage<DeleteDeckResponse> | undefined): boolean {
    return proto3.util.equals(DeleteDeckResponse, a, b);
  }
}

