// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file proto/card/card.proto (package card, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message card.GetCardsRequest
 */
export class GetCardsRequest extends Message<GetCardsRequest> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  constructor(data?: PartialMessage<GetCardsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "card.GetCardsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCardsRequest {
    return new GetCardsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCardsRequest {
    return new GetCardsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCardsRequest {
    return new GetCardsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCardsRequest | PlainMessage<GetCardsRequest> | undefined, b: GetCardsRequest | PlainMessage<GetCardsRequest> | undefined): boolean {
    return proto3.util.equals(GetCardsRequest, a, b);
  }
}

/**
 * @generated from message card.GetCardsResponse
 */
export class GetCardsResponse extends Message<GetCardsResponse> {
  /**
   * @generated from field: repeated card.Card cards = 1;
   */
  cards: Card[] = [];

  constructor(data?: PartialMessage<GetCardsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "card.GetCardsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cards", kind: "message", T: Card, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCardsResponse {
    return new GetCardsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCardsResponse {
    return new GetCardsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCardsResponse {
    return new GetCardsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCardsResponse | PlainMessage<GetCardsResponse> | undefined, b: GetCardsResponse | PlainMessage<GetCardsResponse> | undefined): boolean {
    return proto3.util.equals(GetCardsResponse, a, b);
  }
}

/**
 * @generated from message card.Card
 */
export class Card extends Message<Card> {
  /**
   * @generated from field: string rank = 1;
   */
  rank = "";

  /**
   * @generated from field: string suit = 2;
   */
  suit = "";

  constructor(data?: PartialMessage<Card>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "card.Card";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rank", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "suit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Card {
    return new Card().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Card {
    return new Card().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Card {
    return new Card().fromJsonString(jsonString, options);
  }

  static equals(a: Card | PlainMessage<Card> | undefined, b: Card | PlainMessage<Card> | undefined): boolean {
    return proto3.util.equals(Card, a, b);
  }
}

