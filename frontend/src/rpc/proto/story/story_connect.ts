// @generated by protoc-gen-connect-es v0.13.0 with parameter "target=ts"
// @generated from file proto/story/story.proto (package story, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { CreateSceneRequest, CreateSceneResponse, DeleteSceneRequest, DeleteSceneResponse, GetSceneRequest, GetSceneResponse, GetScenesRequest, GetScenesResponse, UpdateSceneRequest, UpdateSceneResponse } from "./story_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * Define the service with CRUD operations
 *
 * @generated from service story.StoryService
 */
export const StoryService = {
  typeName: "story.StoryService",
  methods: {
    /**
     * @generated from rpc story.StoryService.GetScenes
     */
    getScenes: {
      name: "GetScenes",
      I: GetScenesRequest,
      O: GetScenesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Create a new scene
     *
     * @generated from rpc story.StoryService.CreateScene
     */
    createScene: {
      name: "CreateScene",
      I: CreateSceneRequest,
      O: CreateSceneResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Read (get) a scene by ID
     *
     * @generated from rpc story.StoryService.GetScene
     */
    getScene: {
      name: "GetScene",
      I: GetSceneRequest,
      O: GetSceneResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Update an existing scene
     *
     * @generated from rpc story.StoryService.UpdateScene
     */
    updateScene: {
      name: "UpdateScene",
      I: UpdateSceneRequest,
      O: UpdateSceneResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Delete a scene by ID
     *
     * @generated from rpc story.StoryService.DeleteScene
     */
    deleteScene: {
      name: "DeleteScene",
      I: DeleteSceneRequest,
      O: DeleteSceneResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

